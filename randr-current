#!/usr/bin/env python3
from subprocess import Popen, PIPE
from argparse import ArgumentParser
from shlex import join
from sys import stderr

parser = ArgumentParser()
args = parser.parse_args()


def res(spec):
    w, h = spec.split('x')
    return int(w), int(h)


def res_and_pos(spec):
    res_spec, x, y = spec.split('+')
    return res(res_spec), (int(x), int(y))


def current_mode(modes):
    try:
        return next(
            res(mode.split(maxsplit=1)[0])
            for mode in modes
            if '*' in mode
        )
    except StopIteration:
        return None


def process_block(block):
    from debug import debug
    line, *modes = block
    spec = line.split()
    if spec[0] == 'Screen':
        return
    if spec[1] == 'disconnected':
        yield '--output'
        yield spec[0]
        yield '--off'
        return
    elif spec[1] == 'connected':
        yield '--output'
        yield spec[0]
        mode = current_mode(modes)
        if mode is None:
            yield '--off'
            return
        yield '--mode'
        yield f'{mode[0]}x{mode[1]}'
        i = 2
        if spec[i] == 'primary':
            yield '--primary'
            i += 1
        res, pos = res_and_pos(spec[i])
        i += 1
        yield '--pos'
        yield f'{pos[0]}x{pos[1]}'
        rotate = spec[i] if spec[i] in ('left', 'inverted', 'right') else 'normal'
        scale = res[1 if rotate in ('left', 'right') else 0] / mode[0]
        yield '--scale'
        yield f'{scale:g}'
        yield '--rotate'
        yield rotate


def blocks(stream):
    buffer = []
    for line in stream:
        buffer.append(line.decode().removesuffix('\n'))
        if len(buffer) > 1 and not line[:1].isspace():
            yield buffer[:-1]
            del buffer[:-1]
    if buffer:
        yield buffer


with Popen([ 'xrandr', '--current', '--query' ], stdout=PIPE) as prc:
    assert prc.stdout is not None
    outputs = [ output for block in blocks(prc.stdout) if (output := list(process_block(block))) ]
    if code := prc.wait():
        exit(code)

if not outputs:
    print(parser.prog, 'no screens found', sep=': ', file=stderr)
    exit(1)

prefix = 'xrandr'
for output in outputs:
    print(prefix, join(output), sep='\t')
    prefix = ''
